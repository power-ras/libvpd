DEVPATH!="/devices/*", GOTO="vpd_end"
# See SysFSTreeCollector::filterDevicePath()
DEVPATH=="/devices/virtual/*", GOTO="vpd_end"
DEVPATH=="/devices/system/*", GOTO="vpd_end"
DEVPATH=="/devices/cpu/*", GOTO="vpd_end"
DEVPATH=="/devices/breakpoint/*", GOTO="vpd_end"
DEVPATH=="/devices/tracepoint/*", GOTO="vpd_end"
DEVPATH=="/devices/software/*", GOTO="vpd_end"

# See SysFSTreeCollector::filterDevice()
ENV{DEVTYPE}=="scsi_target", GOTO="vpd_end"
SUBSYSTEM=="enclosure", GOTO="vpd_end"

# See SysFSTreeCollector::isDevice()
ENV{DEVTYPE}=="partition", GOTO="vpd_end"

# More devices that aren't covered by VPD
DEVPATH=="/devices/uprobe/*", GOTO="vpd_end"
DEVPATH=="/devices/kprobe/*", GOTO="vpd_end"
DEVPATH=="/devices/rbd/*", GOTO="vpd_end"

SUBSYSTEM=="scsi_device", GOTO="vpd_update"
SUBSYSTEM=="scsi_host", GOTO="vpd_update"
# Don't generate extra events, we have one for the scsi_device already
# This rule also skips SCSI block device uevents
# (but the corresponding scsi_device will have triggered vpdupdate).
SUBSYSTEMS=="scsi*", GOTO="vpd_end"

# virtual NVMe devices (NVMeoF) are skipped because of the rule above
SUBSYSTEM=="nvme", GOTO="vpd_update"
SUBSYSTEM=="nvme-subsystem", GOTO="vpd_update"
SUBSYSTEMS=="nvme*", GOTO="vpd_end"

# Check for Spyre PCI devices using PCI_ID
SUBSYSTEM=="pci", ACTION=="add", ENV{PCI_ID}=="1014:06A7", GOTO="spyre_vpd_update"
SUBSYSTEM=="pci", ACTION=="add", ENV{PCI_ID}=="1014:06A8", GOTO="spyre_vpd_update"
SUBSYSTEM=="pci", ACTION=="remove", ENV{PCI_ID}=="1014:06A7", GOTO="spyre_vpd_update"
SUBSYSTEM=="pci", ACTION=="remove", ENV{PCI_ID}=="1014:06A8", GOTO="spyre_vpd_update"
GOTO="vpd_end"

LABEL="spyre_vpd_update"
# Log device info
RUN+="/usr/bin/logger -t vpdupdate 'Processing Spyre device - action=$env{ACTION} subsystem=$env{SUBSYSTEM} driver=$env{DRIVER} kernel=$kernel PCI_ID=$env{PCI_ID} devpath=$devpath'"

# Get system status - always exit 1 to capture output
PROGRAM="/bin/sh -c 'systemctl is-system-running 2>&1 || true'"
RUN+="/usr/bin/logger -t vpdupdate 'System status: %c'"

# Check if RESULT is running or degraded
RESULT=="running", GOTO="do_spyre_vpdupdate"
RESULT=="degraded", GOTO="do_spyre_vpdupdate"

# System not ready - skip vpdupdate
RUN+="/usr/bin/logger -t vpdupdate 'Skipping vpdupdate - system not ready (status: %c)'"
GOTO="vpd_end"

LABEL="do_spyre_vpdupdate"
RUN+="/usr/bin/logger -t vpdupdate 'System is ready - running vpdupdate'"
RUN+="/usr/sbin/vpdupdate"
RUN+="/usr/bin/logger -t vpdupdate 'Completed vpdupdate for Spyre device'"
GOTO="vpd_end"

LABEL="vpd_update"
RUN+="/bin/touch /run/run.vpdupdate"
LABEL="vpd_end"
